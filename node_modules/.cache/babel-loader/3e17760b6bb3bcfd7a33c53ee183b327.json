{"ast":null,"code":"var _jsxFileName = \"/Users/negin/Desktop/Codding/React/baby-name/baby-name/src/App.js\";\nimport \"./App.css\";\nimport data from \"../src/data/babyNamesData.json\";\nimport { useState } from \"react\";\nimport BabyList from \"./BabyList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  // const [names, setNames] = useState(data);\n  const sortedNamesWithFavouriteKey = data.map(name => ({ ...name,\n    isavourite: false\n  })).sort((nameOne, nameTwo) => nameOne.name.localeCompare(nameTwo.name));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BabyList, {\n      names: sortedNamesWithFavouriteKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/negin/Desktop/Codding/React/baby-name/baby-name/src/App.js"],"names":["data","useState","BabyList","App","sortedNamesWithFavouriteKey","map","name","isavourite","sort","nameOne","nameTwo","localeCompare"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,IAAP,MAAiB,gCAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACE,QAAMC,2BAA2B,GAAGJ,IAAI,CACrCK,GADiC,CAC5BC,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWC,IAAAA,UAAU,EAAE;AAAvB,GAAX,CAD6B,EAEjCC,IAFiC,CAE5B,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,CAACH,IAAR,CAAaK,aAAb,CAA2BD,OAAO,CAACJ,IAAnC,CAFM,CAApC;AAIF,sBACE;AAAA,2BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEF;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAXD;;KAAMD,G;AAYN,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport data from \"../src/data/babyNamesData.json\";\nimport { useState } from \"react\";\nimport BabyList from \"./BabyList\";\n\nconst App = () => {\n  // const [names, setNames] = useState(data);\n    const sortedNamesWithFavouriteKey = data\n      .map((name) => ({ ...name, isavourite: false }))\n      .sort((nameOne, nameTwo) => nameOne.name.localeCompare(nameTwo.name));\n\n  return (\n    <div>\n      <BabyList names={sortedNamesWithFavouriteKey} />\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}